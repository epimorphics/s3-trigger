/*
Copyright (c) 2016-2017 Bitnami

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1beta1

import (
	v1beta1 "github.com/epimorphics/s3-trigger/pkg/apis/kubeless/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// S3TriggerLister helps list S3Triggers.
type S3TriggerLister interface {
	// List lists all S3Triggers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.S3Trigger, err error)
	// S3Triggers returns an object that can list and get S3Triggers.
	S3Triggers(namespace string) S3TriggerNamespaceLister
	S3TriggerListerExpansion
}

// s3TriggerLister implements the S3TriggerLister interface.
type s3TriggerLister struct {
	indexer cache.Indexer
}

// NewS3TriggerLister returns a new S3TriggerLister.
func NewS3TriggerLister(indexer cache.Indexer) S3TriggerLister {
	return &s3TriggerLister{indexer: indexer}
}

// List lists all S3Triggers in the indexer.
func (s *s3TriggerLister) List(selector labels.Selector) (ret []*v1beta1.S3Trigger, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.S3Trigger))
	})
	return ret, err
}

// S3Triggers returns an object that can list and get S3Triggers.
func (s *s3TriggerLister) S3Triggers(namespace string) S3TriggerNamespaceLister {
	return s3TriggerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// S3TriggerNamespaceLister helps list and get S3Triggers.
type S3TriggerNamespaceLister interface {
	// List lists all S3Triggers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.S3Trigger, err error)
	// Get retrieves the S3Trigger from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.S3Trigger, error)
	S3TriggerNamespaceListerExpansion
}

// s3TriggerNamespaceLister implements the S3TriggerNamespaceLister
// interface.
type s3TriggerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all S3Triggers in the indexer for a given namespace.
func (s s3TriggerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.S3Trigger, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.S3Trigger))
	})
	return ret, err
}

// Get retrieves the S3Trigger from the indexer for a given namespace and name.
func (s s3TriggerNamespaceLister) Get(name string) (*v1beta1.S3Trigger, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("s3trigger"), name)
	}
	return obj.(*v1beta1.S3Trigger), nil
}
